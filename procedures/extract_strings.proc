# This script is part of the strutils CPrAN plugin for Praat.
# The latest version is available through CPrAN or at
# <http://cpran.net/plugins/strutils>
#
# The strutils plugin is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, either
# version 3 of the License, or (at your option) any later version.
#
# The strutils plugin is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with strutils. If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2014-2016 Jose Joaquin Atria

#! ~~~ params
#! in:
#!   .search$: >
#!     A literal string to match
#!   .match: >
#!     If set to true, the resulting Strings object will hold matching
#!     strings. Otherwise, it will hold strings that did not match.
#! out:
#!   .id: The ID of the resulting Strings object
#!   .return: The number of strings in the new Strings object
#! selection:
#!   in:
#!     strings: 1
#!   out:
#!     strings: 1
#! ~~~
#!
#! Creates a Strings object which contains a subset of the strings
#! of an original Strings object. Search query is a literal string. For
#! regular expression matching, use @extractStrings_regex
#!
procedure extractStrings: .search$, .match
  @_extractStrings: .search$, .match, 0
  .id = '_extractStrings.id'
  .return = '_extractStrings.return'
endproc

#! ~~~ params
#! in:
#!   .regex$: >
#!     A regular expression pattern to match
#!   .match: >
#!     If set to true, the resulting Strings object will hold matching
#!     strings. Otherwise, it will hold strings that did not match.
#! out:
#!   .id: The ID of the resulting Strings object
#!   .return: The number of strings in the new Strings object
#! selection:
#!   in:
#!     strings: 1
#!   out:
#!     strings: 1
#! ~~~
#!
#! Creates a Strings object which contains a subset of the strings
#! of an original Strings object. Search query is a regular expression
#! pattern. For matching with literal strings, use @extractStrings
#!
procedure extractStrings_regex: .regex$, .match
  @_extractStrings: .regex$, .match, 1
  .id = '_extractStrings.id'
  .return = '_extractStrings.return'
endproc

#! ~~~ params
#! in:
#!   .search$: >
#!     A regular expression pattern to match.
#!   .match: >
#!     If set to true, the resulting Strings object will hold matching
#!     strings. Otherwise, it will hold strings that did not match.
#!   .regex: >
#!     If true, interpret search query as regular expression pattern.
#!     Otherwise treat as string literal
#! out:
#!   .id: The ID of the resulting Strings object
#!   .return: The number of strings in the new Strings object
#! selection:
#!   in:
#!     strings: 1
#!   out:
#!     strings: 1
#! internal: true
#! ~~~
#!
#! Creates a Strings object which contains a subset of the strings
#! of an original Strings object. Matching of strings is done through
#! a regular expression.
#!
procedure _extractStrings: .search$, .match, .regex
  .name$ = selected$("Strings")
  .id = Copy: .name$ + "_extracted"
  .strings = Get number of strings
  for .j from 0 to .strings-1
    .i = .strings - .j
    .string$ = Get string: .i
    if .regex
      .hit = if index_regex(.string$, .search$) then 1 else 0 fi
    else
      .hit = if index(.string$, .search$) then 1 else 0 fi
    endif
    if .hit != .match
      Remove string: .i
    endif
  endfor
  .return = Get number of strings
endproc
