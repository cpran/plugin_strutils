# This script is part of the strutils CPrAN plugin for Praat.
# The latest version is available through CPrAN or at
# <http://cpran.net/plugins/strutils>
#
# The strutils plugin is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, either
# version 3 of the License, or (at your option) any later version.
#
# The strutils plugin is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with strutils. If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2014-2016 Jose Joaquin Atria

#! ~~~ params
#! in:
#!   .search$: Literal string to match
#! out:
#!   .return: Index of first matching string if found, 0 if not
#! selection:
#!   in:
#!     strings: 1
#! ~~~
#!
#! Searches for a literal string in a Strings object. For matching with regular
#! expressions, use @findInStrings_regex
#!
procedure findInStrings (.search$, .match)
  @_findInStrings: .search$, .match, 0
  .return = '_findInStrings.return'
endproc

#! ~~~ params
#! in:
#!   .regex$:  Regular expression pattern
#! out:
#!   .return: Index of first matching string if found, 0 if not
#! selection:
#!   in:
#!     strings: 1
#! ~~~
#!
#! Searches a Strings object for matches to a regular expression pattern. For
#! matches with literal strings, use @findInStrings.
#!
procedure findInStrings_regex (.regex$, .match)
  @_findInStrings: .regex$, .match, 1
  .return = '_findInStrings.return'
endproc

#! ~~~ params
#! in:
#!   .search$:  Query string
#!   .regex: >
#!     Boolean flag. If true, interpret query string as regular expression
#! out:
#!   .return: Index of first matching string if found, 0 if not
#! selection:
#!   in:
#!     strings: 1
#! internal: true
#! ~~~
#!
#! Searches for a string in a Strings object. The string matching can be
#! done using string literals (which will match if the occur anywhere in the
#! string), or regular expression patterns. This behaviour can be adjusted
#! by modifying the value of `.regex`.
#!
procedure _findInStrings (.search$, .match, .regex)
  .id = selected("Strings")
  .strings = Get number of strings

  .return = 0
  for .i to .strings
    .string$ = Get string: .i

    if .regex
      .hit = if index_regex(.string$, .search$) then 1 else 0 fi
    else
      .hit = if index(.string$, .search$) then 1 else 0 fi
    endif

    if .hit == .match
      .return = .i
      .i += .strings
    endif
  endfor
endproc
