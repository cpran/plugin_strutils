# This script is part of the strutils CPrAN plugin for Praat.
# The latest version is available through CPrAN or at
# <http://cpran.net/plugins/strutils>
#
# The strutils plugin is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, either
# version 3 of the License, or (at your option) any later version.
#
# The strutils plugin is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with strutils. If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2016, 2017 Jose Joaquin Atria

call # strutils.array 1

#! ~~~ params
#! out:
#!   .id: >
#!     The ID of the created array object
#! selection:
#!   out:
#!     strings: 1
#! ~~~
#!
#! Create a Strings as a pseudo-array
#!
procedure array ()
  runScript: preferencesDirectory$ +
    ... "/plugin_strutils/scripts/create_empty_strings.praat", "array"
  .id = selected("Strings")
endproc

#! ~~~ params
#! in:
#!   .val: >
#!     The number to add to the array
#! selection:
#!   in:
#!     strings: 1
#! ~~~
#!
#! Append the provided numeric value to the end of the array
#!
procedure push: .val
  @push$: string$(.val)
endproc

#! ~~~ params
#! in:
#!   .val$: >
#!     The string to add to the array
#! selection:
#!   in:
#!     strings: 1
#! ~~~
#!
#! Append the provided string value to the end of the array
#!
procedure push$: .val$
  .id = selected("Strings")

  .n = Get number of strings
  Insert string: .n + 1, .val$
  push.return = .n + 1
endproc

#! ~~~ params
#! out:
#!   .return$: >
#!     The removed value, as a string
#!   .return: >
#!     The removed value, as a number
#! selection:
#!   in:
#!     strings: 1
#! ~~~
#!
#! Remove the last item in the array
#!
procedure pop ()
  .id = selected("Strings")

  .n = Get number of strings
  if !.n
    exitScript: "Cannot pop from empty array"
  endif

  .return$ = Get string: .n
  .return  = number(.return$)
  Remove string: .n
endproc

#! ~~~ params
#! in:
#!   .val: >
#!     The number to add to the array
#! selection:
#!   in:
#!     strings: 1
#! ~~~
#!
#! Append the provided numeric value to the beginning of the array
#!
procedure unshift: .val
  @unshift$: string$(.val)
endproc

#! ~~~ params
#! in:
#!   .val$: >
#!     The string to add to the array
#! selection:
#!   in:
#!     strings: 1
#! ~~~
#!
#! Append the provided string value to the beginning of the array
#!
procedure unshift$: .val$
  .id = selected("Strings")

  Insert string: 1, .val$
  unshift.return = do("Get number of strings")
endproc

#! ~~~ params
#! out:
#!   .return$: >
#!     The removed value, as a string
#!   .return: >
#!     The removed value, as a number
#! selection:
#!   in:
#!     strings: 1
#! ~~~
#!
#! Remove the first item in the array
#!
procedure shift ()
  .id = selected("Strings")

  .n = Get number of strings
  if !.n
    exitScript: "Cannot shift from empty array"
  endif

  .return$ = Get string: 1
  .return  = number(.return$)
  Remove string: 1
endproc

#! ~~~ params
#! in:
#!   .from: >
#!     The starting index
#!   .to: >
#!     The final index
#! out:
#!   .return: >
#!     The ID of the new array
#! selection:
#!   in:
#!     strings: 1
#! ~~~
#!
#! Creates a Strings object as a subset of the selected Strings, with the
#! strings between the first and last provided. The original Strings object
#! is not modified in the process.
#!
procedure slice: .from, .to
  .id = selected("Strings")
  .n = Get number of strings

  @_array_negative_index: .n, .from
  .from = '_array_negative_index.index'

  @_array_negative_index: .n, .to
  .to = '_array_negative_index.index'

  if .to >= .from
    .return = Extract part: .from, .to
  else
    @array()
    .return = array.id
  endif
  Rename: selected$("Strings") - "_part" + "_slice"
endproc
#! ~~~ params
#! in:
#!   .from: >
#!     The starting index
#!   .to: >
#!     The final index
#! out:
#!   .return: >
#!     The ID of the removed array
#! selection:
#!   in:
#!     strings: 1
#! ~~~
#!
#! Similar to `@slice`, but this procedure also removes the extracted strings
#! from the original.
#!
procedure excise: .from, .to
  @slice: .from, .to
  selectObject: slice.id
  for .j from slice.from to slice.to
    Remove string: slice.from
  endfor
  selectObject: slice.return
  .return = Rename:
    ... replace_regex$(selected$("Strings"), "_[^_]+", "_excise", 1)
endproc

#! ~~~ params
#! in:
#!   .after: >
#!     The position in the selected Strings after which the target array
#!     should be inserted.
#!   .strings: >
#!     The ID of the target array
#! out:
#!   .return: >
#!     The ID of the modified array (the one initially selected)
#! selection:
#!   in:
#!     strings: 1
#! ~~~
#!
#! Insert the contents of an existing array into the selected array
#!
procedure splice: .at, .strings
  .return = selected("Strings")
  @_array_negative_index: do("Get number of strings"), .at
  .at = '_array_negative_index.index'

  selectObject: .strings
  .nn = Get number of strings

  selectObject: .return
  for .j from 0 to .n - 1
    .i = .nn - .j
    Insert string: .at, Object_'.strings'$[.i]
  endfor
endproc

#! ~~~ params
#! in:
#!   .glue: >
#!     The string to use as separator between joined elements
#! out:
#!   .return$: >
#!     The joined string
#! selection:
#!   in:
#!     strings: 1
#! ~~~
#!
#! Joins all elements of the array into a single string, using the string in
#! .glue$ as a separator between them.
#!
procedure join: .glue$
  .id = selected("Strings")

  .return$ = ""
  .n = Get number of strings
  for .i to .n
    .return$ = .return$ + do$("Get string...", .i) + .glue$
  endfor
  .return$ = .return$ - .glue$
endproc

procedure _array_negative_index: .total, .index
  if .index < 0
    .index = .total + 1 + .index
  endif
endproc

procedure # .key$, .value
  .'.key$' = .value
endproc
