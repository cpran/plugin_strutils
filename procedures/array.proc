#! ~~~ params
#! ~~~
#!
#! Create a Strings as a pseudo-array
#!
procedure array ()
  runScript: preferencesDirectory$ +
    ... "/plugin_strutils/scripts/create_empty_strings.praat", "array"
  .id = selected("Strings")
endproc

#! ~~~ params
#! in:
#!   .val: >
#!     The number to add to the array
#! ~~~
#!
#! Append the provided numeric value to the end of the array
#!
procedure push: .val
  @push$: string$(.val)
endproc

#! ~~~ params
#! in:
#!   .val$: >
#!     The string to add to the array
#! ~~~
#!
#! Append the provided string value to the end of the array
#!
procedure push$: .val$
  .id = selected("Strings")

  .n = Get number of strings
  Insert string: .n + 1, .val$
  push.return = .n + 1
endproc

#! ~~~ params
#! out:
#!   .return$: >
#!     The removed value, as a string
#!   .return: >
#!     The removed value, as a number
#! ~~~
#!
#! Remove the last item in the array
#!
procedure pop ()
  .id = selected("Strings")

  .n = Get number of strings
  if !.n
    exitScript: "Cannot pop from empty array"
  endif

  .return$ = Get string: .n
  .return  = number(.return$)
  Remove string: .n
endproc

#! ~~~ params
#! in:
#!   .val: >
#!     The number to add to the array
#! ~~~
#!
#! Append the provided numeric value to the beginning of the array
#!
procedure unshift: .val
  @unshift$: string$(.val)
endproc

#! ~~~ params
#! in:
#!   .val$: >
#!     The string to add to the array
#! ~~~
#!
#! Append the provided string value to the beginning of the array
#!
procedure unshift$: .val$
  .id = selected("Strings")

  Insert string: 1, .val$
  unshift.return = do("Get number of strings")
endproc

#! ~~~ params
#! out:
#!   .return$: >
#!     The removed value, as a string
#!   .return: >
#!     The removed value, as a number
#! ~~~
#!
#! Remove the first item in the array
#!
procedure shift ()
  .id = selected("Strings")

  .n = Get number of strings
  if !.n
    exitScript: "Cannot shift from empty array"
  endif

  .return$ = Get string: 1
  .return  = number(.return$)
  Remove string: 1
endproc

#! ~~~ params
#! in:
#!   .from: >
#!     The starting index
#!   .to: >
#!     The final index
#! out:
#!   .return: >
#!     The ID of the removed array
#! ~~~
#!
#! Remove the items in the array existing between the first and last provided
#! indices.
#!
procedure slice: .from, .to
  .id = selected("Strings")

  .return = Extract part: .from, .to
  for .i from .from to .to
    Remove string: .i
  endfor
endproc

#! ~~~ params
#! in:
#!   .glue: >
#!     The string to use as separator between joined elements
#! out:
#!   .return$: >
#!     The joined string
#! ~~~
#!
#! Joins all elements of the array into a single string.
#!
procedure join: .glue$
  .id = selected("Strings")

  .return$ = ""
  .n = Get number of strings
  for .i to .n
    .return$ = .return$ + do$("Get string...", .i) + .glue$
  endfor
  .return$ = .return$ - .glue$
endproc

#! ~~~ params
#! in:
#!   .separator$: The literal separator string
#!   .string$: The string to split
#! out:
#!   .return$[]: The split string fragments
#!   .length: The number of string fragments
#!   .id: The ID of a Strings representation of the array
#! ~~~
#!
#! ~~~ praat synopsis
#! @split: " ", "correct horse battery staple"
#! selectObject: split.id
#! for i to do("Get number of strings")
#!   @shift()
#!   appendInfoLine: shift.return$
#! endfor
#! removeObject: split.id
#! # Prints
#! #   correct
#! #   horse
#! #   battery
#! #   staple
#! ~~~
#!
#! Takes the contents of `string$` and separates it into a number of smaller
#! strings using the string in `separator$` as the separator string. The
#! separator can be longer than one character. The match is made using it
#! as a string literal.
#!
#! For compatibility with the version of this procedure in the "utils" plugin,
#! split substrings are stored in the `.return$[]` indexed variable,
#! which will have a length equal to the value in `.length`. Additionally,
#! they are pushed to a Strings-array whose ID is stored in `.id`.
#!
procedure split: .sep$, .str$
  .n = numberOfSelected()
  for .i to .n
    .id[.i] = selected(.i)
  endfor

  @array()
  .id = array.id

  .seplen = length(.sep$)
  .length = 0
  repeat
    .strlen = length(.str$)
    .sep = index(.str$, .sep$)
    if .sep > 0
      .part$ = left$(.str$, .sep-1)
      .str$ = mid$(.str$, .sep+.seplen, .strlen)
    else
      .part$ = .str$
    endif
    .length = .length+1
    .return$[.length] = .part$

    # For backwards compatibility only! Will disappear!
    .array$[.length] = .part$

    if .id
      @push$: .part$
    endif
  until .sep = 0

  nocheck selectObject: undefined
  for .i to .n
    plusObject: .id[.i]
  endfor
endproc
